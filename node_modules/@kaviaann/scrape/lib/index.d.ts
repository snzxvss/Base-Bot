import * as cheerio from 'cheerio';

interface ISamehadakuSearch {
    title: string | undefined;
    id: string;
    thumbnail: string;
    description: string;
    genre: string[];
    type: string[];
    star: string;
    views: string;
    link: string;
}
interface ISamehadakuLatest {
    total: Number;
    anime: {
        title: string;
        thumbnail: string;
        postedBy: string;
        episode: string;
        release: string;
        link: string;
    }[];
}
interface ISamehadakuReleaseI {
    author: string;
    content: string;
    date: string;
    east_schedule: string;
    east_score: string;
    east_time: string;
    east_type: string;
    feature_img_src: string;
    genre: string[];
    id: number;
    slug: string;
    title: string;
    type: string;
    url: string;
}
interface ISamehadakuRelease {
    sunday: ISamehadakuReleaseI[];
    monday: ISamehadakuReleaseI[];
    tuesday: ISamehadakuReleaseI[];
    wednesday: ISamehadakuReleaseI[];
    thursday: ISamehadakuReleaseI[];
    friday: ISamehadakuReleaseI[];
    saturday: ISamehadakuReleaseI[];
}
interface ISamehadakuDetail {
    title: string;
    thumbnail: string;
    published: Date;
    trailer: string;
    rating: string;
    description: string;
    genre: string[];
    detail: {
        name: string;
        data: string;
    }[];
    batch: string | null;
    episode: {
        title: string;
        date: string;
        link: string;
    }[];
}
interface ISamehadakuDownload {
    title: string;
    link: string;
    downloads: {
        name: string;
        post: string;
        nume: string;
        type: "schtml" | string;
        link: string;
    }[];
}
/**
 * Scraped By Kaviaann
 * Protected By MIT LICENSE
 * Whoever caught removing wm will be sued
 * @description Any Request? Contact me : vielynian@gmail.com
 * @author Kaviaann 2024
 * @copyright https://whatsapp.com/channel/0029Vac0YNgAjPXNKPXCvE2e
 */
declare class Samehadaku {
    private BASE_URL;
    constructor();
    search(query: string): Promise<ISamehadakuSearch[]>;
    latest(): Promise<ISamehadakuLatest>;
    release(): Promise<ISamehadakuRelease>;
    detail(url: string): Promise<ISamehadakuDetail>;
    download(url: string): Promise<ISamehadakuDownload>;
}

interface IKuronimeSearch {
    result: {
        id: number;
        image: string;
        title: string;
        genres: string;
        type: string;
        latest: string;
        sub: "completed" | string;
        link: string;
    }[];
    total: number;
    query: string;
}
interface IKuronimeDetail {
    title: string;
    thumbnail: string;
    trailer: string;
    id: string;
    synops: string;
    author: string;
    updated: string;
    views: string;
    followers: string;
    rating: string;
    detail: {
        name: string;
        data: string;
    }[];
    episode: {
        title: string;
        link: string;
    }[];
}
/**
 * Scraped By Kaviaann
 * Protected By MIT LICENSE
 * Whoever caught removing wm will be sued
 * @description Any Request? Contact me : vielynian@gmail.com
 * @author Kaviaann 2024
 * @copyright https://whatsapp.com/channel/0029Vac0YNgAjPXNKPXCvE2e
 */
declare class Kuronime {
    private BASE_URL;
    constructor();
    search(query: string): Promise<IKuronimeSearch>;
    detail(url: string): Promise<IKuronimeDetail>;
}

type index$4_IKuronimeDetail = IKuronimeDetail;
type index$4_IKuronimeSearch = IKuronimeSearch;
type index$4_ISamehadakuDetail = ISamehadakuDetail;
type index$4_ISamehadakuDownload = ISamehadakuDownload;
type index$4_ISamehadakuLatest = ISamehadakuLatest;
type index$4_ISamehadakuRelease = ISamehadakuRelease;
type index$4_ISamehadakuSearch = ISamehadakuSearch;
type index$4_Kuronime = Kuronime;
declare const index$4_Kuronime: typeof Kuronime;
type index$4_Samehadaku = Samehadaku;
declare const index$4_Samehadaku: typeof Samehadaku;
declare namespace index$4 {
  export { type index$4_IKuronimeDetail as IKuronimeDetail, type index$4_IKuronimeSearch as IKuronimeSearch, type index$4_ISamehadakuDetail as ISamehadakuDetail, type index$4_ISamehadakuDownload as ISamehadakuDownload, type index$4_ISamehadakuLatest as ISamehadakuLatest, type index$4_ISamehadakuRelease as ISamehadakuRelease, type index$4_ISamehadakuSearch as ISamehadakuSearch, index$4_Kuronime as Kuronime, index$4_Samehadaku as Samehadaku };
}

interface ISaweriaUser {
    currency: "IDR";
    description: string;
    donation_template: string;
    email: string;
    email_verified: boolean;
    id: string;
    overlay: {
        media: boolean;
        mediashare: boolean;
        mediashare_max_duration: number;
        mediashare_rate: number;
        min: number;
        min_media: number;
        min_tts: number;
        quick_amounts: [5000, 10000, 25000, 100000];
        sound: {};
        soundboard: boolean;
        soundboard_items: [];
        text_filter: string;
        tts: string;
    };
    profile_picture: string;
    socials: {
        facebook: string;
        instagram: string;
        twitch: string;
        twitter: string;
        youtube: string;
    };
    plus?: boolean;
    isGopayEnabled?: boolean;
    isOvoEnabled?: boolean;
    isDanaEnabled?: boolean;
    isLinkAjaEnabled?: boolean;
    isQRISEnabled?: boolean;
    tier_key: string;
    username: string;
    verified: boolean;
    vote: {
        end_at: string;
        on: false;
        start_at: string;
        tag: [];
        title: string;
    };
}
interface ISaweriaLogin {
    authorization: string;
    data: ISaweriaUser;
}
interface ISaweriaRegister {
    success: boolean;
    data: string;
    email: string;
}
interface ISaweriaPayment {
    link: string;
    data: {
        amount: number;
        amount_raw: number;
        created_at: string;
        currency: "IDR";
        donator: {
            email: string;
            first_name: string;
            phone: null | "";
        };
        donator_id: string;
        etc: {
            amount_to_display: number;
        };
        id: string;
        message: string;
        need_notification: boolean;
        payment_type: "qris";
        qr_string: string;
        status: "PENDING";
        type: "donation";
        user_id: string;
    };
}
interface ISaweriaStatus {
    id: string;
    data: {
        amount_raw: number;
        created_at: string;
        id: string;
        qr_string: string;
        username: string;
    };
}
interface ISaweriaBalance {
    balance: number;
    currency: string;
}
interface ISaweriaTransaction {
    amount: number;
    created_at: string;
    currency: string;
    cut: number;
    donator_email: string | null;
    donator_is_user: UserActivation;
    donator_name: string;
    id: string;
    message: string;
    status: "SUCCESS";
    type: "donation";
}
interface ISaweriaTransactions {
    total: number;
    data: ISaweriaTransaction[];
}
/**
 * Scraped By Kaviaann
 * Protected By MIT LICENSE
 * Whoever caught removing wm will be sued
 * @description Any Request? Contact me : vielynian@gmail.com
 * @author Kaviaann 2024
 * @copyright https://whatsapp.com/channel/0029Vac0YNgAjPXNKPXCvE2e
 */
declare class Saweria {
    private BASE_URL;
    private BACKEND;
    saweria: string;
    token: string;
    constructor();
    login(email: string, password: string): Promise<ISaweriaLogin>;
    register(email: string): Promise<ISaweriaRegister>;
    getUser(): Promise<ISaweriaUser>;
    getSaweria(url: string): Promise<ISaweriaUser>;
    setToken(token: string): Promise<void>;
    setSaweria(username: string): Promise<void>;
    createPayment(amount?: number, message?: string, token?: string): Promise<ISaweriaPayment>;
    sendPayment(url: string, amount?: number, message?: string): Promise<ISaweriaPayment>;
    status(id: string): Promise<ISaweriaStatus>;
    getBalance(): Promise<ISaweriaBalance>;
    getTransaction(page?: number): Promise<ISaweriaTransactions>;
}

interface IGameStalk {
    id: string;
    name: string;
}
/**
 * Scraped By Kaviaann
 * Protected By MIT LICENSE
 * Whoever caught removing wm will be sued
 * @description Any Request? Contact me : vielynian@gmail.com
 * @author Kaviaann 2024
 * @copyright https://whatsapp.com/channel/0029Vac0YNgAjPXNKPXCvE2e
 */
declare function ffStalk(id: string): Promise<IGameStalk>;

interface ILatestHeros {
    total: number;
    data: ILatestHero[];
}
interface IHeroRelation {
    desc: string;
    target_hero: {
        data: {
            head: string;
        };
    }[];
    target_hero_id: number[];
}
interface ILatestHero {
    name: string;
    id: number;
    media: {
        icon: string;
        png: string;
        potrait: string;
        head: string;
        header: string;
    };
    createdAt: number;
    updatedAt: number;
    story: string;
    tale: string;
    sourceId: number;
    link: string;
    lane: {
        name: string;
        id: number;
        icon: string;
    }[];
    role: {
        name: string;
        id: number;
        icon: string;
    }[];
    ability: {
        durability: string;
        offense: string;
        ability_effects: string;
        difficulty: string;
    };
    skill: {
        name: string;
        id: number;
        icon: string;
        desc: string;
        update: {
            tagid: number;
            tagname: string;
            tagrgb: string;
        }[];
        video: string;
        cd: string;
        mana_cost?: string;
    }[];
    speciality: string[];
    difficulty: string;
    relation: {
        assist?: IHeroRelation;
        strong?: IHeroRelation;
        weak?: IHeroRelation;
    };
    level: string[];
}
/**
 * Scraped By Kaviaann
 * Protected By MIT LICENSE
 * Whoever caught removing wm will be sued
 * @description Any Request? Contact me : vielynian@gmail.com
 * @author Kaviaann 2024
 * @copyright https://whatsapp.com/channel/0029Vac0YNgAjPXNKPXCvE2e
 */
declare class Mlbb {
    constructor();
    latestHero(): Promise<ILatestHeros>;
}

interface IPostId {
    id: number;
    kode_kemendagri: string;
    kode_pos: number;
    kelurahan: string;
    kecamatan: string;
    kota: string;
    provinsi: string;
    zona_waktu: string;
    lintang: number;
    bujur: number;
    elevasi: number;
}
/**
 * Scraped By Kaviaann
 * Protected By MIT LICENSE
 * Whoever caught removing wm will be sued
 * @description Any Request? Contact me : vielynian@gmail.com
 * @author Kaviaann 2024
 * @copyright https://whatsapp.com/channel/0029Vac0YNgAjPXNKPXCvE2e
 */
declare function postid(post: number | string): Promise<IPostId>;

type index$3_IGameStalk = IGameStalk;
type index$3_IHeroRelation = IHeroRelation;
type index$3_ILatestHero = ILatestHero;
type index$3_ILatestHeros = ILatestHeros;
type index$3_IPostId = IPostId;
type index$3_ISaweriaBalance = ISaweriaBalance;
type index$3_ISaweriaLogin = ISaweriaLogin;
type index$3_ISaweriaPayment = ISaweriaPayment;
type index$3_ISaweriaRegister = ISaweriaRegister;
type index$3_ISaweriaStatus = ISaweriaStatus;
type index$3_ISaweriaTransaction = ISaweriaTransaction;
type index$3_ISaweriaTransactions = ISaweriaTransactions;
type index$3_ISaweriaUser = ISaweriaUser;
type index$3_Mlbb = Mlbb;
declare const index$3_Mlbb: typeof Mlbb;
type index$3_Saweria = Saweria;
declare const index$3_Saweria: typeof Saweria;
declare const index$3_ffStalk: typeof ffStalk;
declare const index$3_postid: typeof postid;
declare namespace index$3 {
  export { type index$3_IGameStalk as IGameStalk, type index$3_IHeroRelation as IHeroRelation, type index$3_ILatestHero as ILatestHero, type index$3_ILatestHeros as ILatestHeros, type index$3_IPostId as IPostId, type index$3_ISaweriaBalance as ISaweriaBalance, type index$3_ISaweriaLogin as ISaweriaLogin, type index$3_ISaweriaPayment as ISaweriaPayment, type index$3_ISaweriaRegister as ISaweriaRegister, type index$3_ISaweriaStatus as ISaweriaStatus, type index$3_ISaweriaTransaction as ISaweriaTransaction, type index$3_ISaweriaTransactions as ISaweriaTransactions, type index$3_ISaweriaUser as ISaweriaUser, index$3_Mlbb as Mlbb, index$3_Saweria as Saweria, index$3_ffStalk as ffStalk, index$3_postid as postid };
}

interface ISpotify {
    title: string;
    author: string;
    thumbnail: string;
    cover: string;
    music: string;
    link: string;
}
/**
 * Scraped By Kaviaann
 * Protected By MIT LICENSE
 * Whoever caught removing wm will be sued
 * @description Any Request? Contact me : vielynian@gmail.com
 * @author Kaviaann 2024
 * @copyright https://whatsapp.com/channel/0029Vac0YNgAjPXNKPXCvE2e
 */
declare function spotify(url: string): Promise<ISpotify>;

interface IFacebook {
    title: string;
    duration: string;
    thumbnail: string;
    media: string;
    video: {
        quality: string;
        url: string | cheerio.Element;
    }[];
    music: string;
}
/**
 * Scraped By Kaviaann
 * Protected By MIT LICENSE
 * Whoever caught removing wm will be sued
 * @description Any Request? Contact me : vielynian@gmail.com
 * @author Kaviaann 2024
 * @copyright https://whatsapp.com/channel/0029Vac0YNgAjPXNKPXCvE2e
 */
declare function facebook(url: string): Promise<IFacebook>;

interface IDrive {
    name: string;
    link: string;
    download: string;
}
/**
 * Scraped By Kaviaann
 * Protected By MIT LICENSE
 * Whoever caught removing wm will be sued
 * @description Any Request? Contact me : vielynian@gmail.com
 * @author Kaviaann 2024
 * @copyright https://whatsapp.com/channel/0029Vac0YNgAjPXNKPXCvE2e
 */
declare function drive(url: string): Promise<IDrive>;

interface IYoutubeR {
    size: string;
    format: string;
    url: string;
}
interface IYoutubeDl {
    mp4: {
        [key: string]: () => Promise<IYoutubeR>;
    };
    mp3: {
        [key: string]: () => Promise<IYoutubeR>;
    };
}
interface IYoutubeDownload {
    title: string;
    description: string;
    url: string;
    id: string;
    duration: {
        seconds: number;
        timestamp: string;
    };
    views: number;
    genre: string;
    releaseDate: string;
    published: string;
    media: {
        image: string;
        thumbnail: string;
    };
    author: {
        name: string;
        url: string;
    };
    dl: IYoutubeDl;
}
interface IYoutubeVideo {
    title: string;
    id: string;
    url: string;
    media: {
        thumbnail: string;
        image: string;
    };
    description: string;
    duration: {
        seconds: number;
        timestamp: string;
    };
    published: string;
    views: number;
    author: {
        name: string;
        url: string;
    };
}
interface IYoutube {
    type: "search" | "download";
    download?: IYoutubeDownload;
    query?: string;
    total?: number;
    videos?: IYoutubeVideo[];
}
/**
 * Scraped By Kaviaann
 * Protected By MIT LICENSE
 * Whoever caught removing wm will be sued
 * @description Any Request? Contact me : vielynian@gmail.com
 * @author Kaviaann 2024
 * @copyright https://whatsapp.com/channel/0029Vac0YNgAjPXNKPXCvE2e
 */
declare function youtube(data: string): Promise<IYoutube>;

type index$2_IDrive = IDrive;
type index$2_IFacebook = IFacebook;
type index$2_ISpotify = ISpotify;
type index$2_IYoutube = IYoutube;
type index$2_IYoutubeDl = IYoutubeDl;
type index$2_IYoutubeDownload = IYoutubeDownload;
type index$2_IYoutubeR = IYoutubeR;
type index$2_IYoutubeVideo = IYoutubeVideo;
declare const index$2_drive: typeof drive;
declare const index$2_facebook: typeof facebook;
declare const index$2_spotify: typeof spotify;
declare const index$2_youtube: typeof youtube;
declare namespace index$2 {
  export { type index$2_IDrive as IDrive, type index$2_IFacebook as IFacebook, type index$2_ISpotify as ISpotify, type index$2_IYoutube as IYoutube, type index$2_IYoutubeDl as IYoutubeDl, type index$2_IYoutubeDownload as IYoutubeDownload, type index$2_IYoutubeR as IYoutubeR, type index$2_IYoutubeVideo as IYoutubeVideo, index$2_drive as drive, index$2_facebook as facebook, index$2_spotify as spotify, index$2_youtube as youtube };
}

interface IEnglishAiChat {
    content: string;
    role: "user" | "assistant";
    refusal?: null;
}
interface IEnglishAi {
    history: IEnglishAiChat[];
    response: string;
}
/**
 * Scraped By Kaviaann
 * Protected By MIT LICENSE
 * Whoever caught removing wm will be sued
 * @description Any Request? Contact me : vielynian@gmail.com
 * @author Kaviaann 2024
 * @copyright https://whatsapp.com/channel/0029Vac0YNgAjPXNKPXCvE2e
 */
declare function englishAi(chat?: IEnglishAiChat[]): Promise<IEnglishAi>;

interface IFluxGenRes {
    prompt: string;
    total: number;
    images: IFluxGen[];
}
interface IFluxGen {
    isNSFW: Boolean;
    imageURI: string;
    imageURL: string;
}
/**
 * Scraped By Kaviaann
 * Protected By MIT LICENSE
 * Whoever caught removing wm will be sued
 * @description Any Request? Contact me : vielynian@gmail.com
 * @author Kaviaann 2024
 * @copyright https://whatsapp.com/channel/0029Vac0YNgAjPXNKPXCvE2e
 */
declare function fluxGen(prompt: string): Promise<IFluxGenRes>;

type index$1_IEnglishAi = IEnglishAi;
type index$1_IEnglishAiChat = IEnglishAiChat;
type index$1_IFluxGen = IFluxGen;
type index$1_IFluxGenRes = IFluxGenRes;
declare const index$1_englishAi: typeof englishAi;
declare const index$1_fluxGen: typeof fluxGen;
declare namespace index$1 {
  export { type index$1_IEnglishAi as IEnglishAi, type index$1_IEnglishAiChat as IEnglishAiChat, type index$1_IFluxGen as IFluxGen, type index$1_IFluxGenRes as IFluxGenRes, index$1_englishAi as englishAi, index$1_fluxGen as fluxGen };
}

declare namespace index {
  export { index$1 as Ai, index$4 as Anime, index$2 as Downloader, index$3 as Tools };
}

declare function delay(ms: number): Promise<void>;
declare function generateId(length: number): Promise<string>;

declare const _function_delay: typeof delay;
declare const _function_generateId: typeof generateId;
declare namespace _function {
  export { _function_delay as delay, _function_generateId as generateId };
}

export { _function as Function, index as Scraper };
